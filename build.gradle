apply plugin: 'java'
apply plugin: 'eclipse'

configurations {
	pluginjar
	pluginjar_linux_x86
	pluginjar_linux_x86_64
	pluginjar_windows_x86
	pluginjar_windows_x86_64
	pluginjar_macosx_x86
	pluginjar_macosx_x86_64
}

repositories {
	mavenCentral()

	maven {
		url "http://maven-eclipse.github.io/maven"
	}
}

project.ext {
	pluginId = "gui"
	pluginName = "GUI"
	pluginVersion = "0.5.0-alpha"
	pluginDebianVersion = "1"
	pluginDate = new Date()
	pluginAppMinVersion = "0.5.0-alpha"
	pluginRelease = rootProject.ext.applicationRelease
	pluginConflictsWith = ""

	pluginVersionSnapshot = rootProject.ext.applicationVersionSnapshot
	pluginVersionFull = "${pluginVersion}${pluginVersionSnapshot}"
	pluginNeedsOperatingSystemAndArchitecture = true
}

// Include tasks ///////////////////////////////////////////////////////////////

apply from: 'core/gradle/gradle/plugins.jar.gradle'
apply from: 'core/gradle/gradle/plugins.debian.gradle'

// Task to determine SWT library ///////////////////////////////////////////////

public String getOs() {
	return (project.ext.has("pluginOperatingSystem") && !"all".equals(project.ext.pluginOperatingSystem)) ? project.ext.pluginOperatingSystem : System.getProperty("os.name").toLowerCase().split()[0]
}

public String getArch() {
	String arch = (project.ext.has("pluginArchitecture") && !"all".equals(project.ext.pluginArchitecture)) ? project.ext.pluginArchitecture : System.getProperty("os.arch")
	return arch.substring(arch.length()-2, arch.length())
}

public String getOsArch(String os, String arch) {
	return os + "_" + arch
}

public String getOsArch() {
	return getOsArch(getOs(), getArch())
}

public String getSwtLibrary(String os, String arch) {
	String osArch = getOsArch(os, arch)
	String swtJarName;

	switch(osArch) {
		case 'windows_86': swtJarName = 'win32.win32.x86'; break;
		case 'windows_64': swtJarName = 'win32.win32.x86_64'; break;
		case 'linux_86': swtJarName = 'gtk.linux.x86'; break;
		case 'linux_64': swtJarName = 'gtk.linux.x86_64'; break;
		case 'mac_64': case 'macosx_64': swtJarName = 'cocoa.macosx.x86_64'; break;
		case 'mac_86': case 'macosx_86': swtJarName = 'cocoa.macosx'; break;
		default: throw new Exception('Unknown OS ' + osArch + '(' + os + ', ' + arch + ') (must be one of windows_86, windows_64, linux_86, linux_64, mac_86, or mac_64)');
	}

	return swtJarName;
}

public String getSwtLibrary() {
	return getSwtLibrary(getOs(), getArch())
}

// GUI Dependencies ////////////////////////////////////////////////////////////

dependencies {
	compile		project(":syncany-lib")
	compile		project(":syncany-util")
	compile		project(":syncany-cli")
	compile		project(":syncany-api")

	compile		"commons-net:commons-net:2.2"
	compile		"commons-beanutils:commons-beanutils:1.9.0"
	compile		"org.eclipse.swt:org.eclipse.swt.${getSwtLibrary()}:4.4"
	compile		"org.apache.httpcomponents:httpclient:4.3.4"
	compile		"org.simpleframework:simple-xml:2.7.1"
	compile		"com.google.guava:guava:15.0"
	compile 	"commons-io:commons-io:2.4"
	compile		"org.ocpsoft.prettytime:prettytime:3.2.5.Final"
	compile			"net.sf.jopt-simple:jopt-simple:4.5"      
	compile			"io.undertow:undertow-servlet:1.1.0.CR3"
	compile			"io.undertow:undertow-websockets-jsr:1.1.0.CR3"

	pluginjar			"commons-net:commons-net:2.2"
	pluginjar			"commons-beanutils:commons-beanutils:1.9.0"
	pluginjar			"org.ocpsoft.prettytime:prettytime:3.2.5.Final"

	pluginjar_windows_x86		"org.eclipse.swt:org.eclipse.swt.win32.win32.x86:4.4"
	pluginjar_windows_x86_64	"org.eclipse.swt:org.eclipse.swt.win32.win32.x86_64:4.4"
	pluginjar_linux_x86		"org.eclipse.swt:org.eclipse.swt.gtk.linux.x86:4.4"
	pluginjar_linux_x86_64		"org.eclipse.swt:org.eclipse.swt.gtk.linux.x86_64:4.4"
	pluginjar_macosx_x86		"org.eclipse.swt:org.eclipse.swt.cocoa.macosx:4.4"
	pluginjar_macosx_x86_64		"org.eclipse.swt:org.eclipse.swt.cocoa.macosx.x86_64:4.4"

	testCompile		project(path: ":syncany-lib", configuration: "tests")
	testCompile		project(path: ":syncany-util", configuration: "tests")
	testCompile		"junit:junit:4.9"
}

// GUI-specific Debian Tasks ///////////////////////////////////////////////////

task pluginDebianGuiPrepare(dependsOn: [pluginDebianClean, pluginJar]) {
	doLast {
		copy {
			from files("gradle/debian/syncany-plugin-gui")
			into file("build/debian/syncany-plugin-gui/debian")
		}

		copy {
			from file("gradle/debian/syncany-plugin-gui/debian")
			include "control"
			expand([
				pluginAppMinVersion: "${pluginAppMinVersion}",
				pluginDebianArchitecture: "${pluginDebianArchitecture}",
				pluginMiscDepends: "\${misc:Depends}" // Dirty hack to keep ${misc:Depends} debian variable
			])
			into file("build/debian/syncany-plugin-gui/debian/debian")
		}

		copy {
			from files("build/libs")
			into file("build/debian/syncany-plugin-gui/debian/usr/share/syncany/lib")
		}

		exec {
			workingDir file(".")
			commandLine(
				rootProject.file("gradle/debian/makechangelog.pl"),
				"syncany-plugin-gui",
				"${pluginDebianDistribution}",
				"${pluginDebianVersionFull}",
				file("CHANGELOG.md"),
				file("build/debian/syncany-plugin-gui/debian/debian/changelog")
			)
		}
	}
}

task pluginDebianGuiDeb(dependsOn: [pluginDebianGuiPrepare]) {
	doLast {
		exec {
			workingDir file("build/debian/syncany-plugin-gui/debian")
			commandLine "debuild -i -us -uc -b -a${pluginDebianArchitecture}".split()
		}

		if (!project.ext.has('pluginDebDontCopyToUpload')) {
			copy {
				from files("build/debian/syncany-plugin-gui")
				include "*.deb"
				into file("build/upload")
			}
		}
	}
}

// Windows Installer ///////////////////////////////////////////////////////////

task cleanInstallAndLibDirs(type: Delete) {
	delete files("build/install")
	delete files("build/libs")
}

rootProject.installApp.mustRunAfter = [cleanInstallAndLibDirs] // Dirty hack to fix order in dependsOn

task exeWithGui(dependsOn: [cleanInstallAndLibDirs, rootProject.installApp, pluginJar]) << {
	String applicationArchitecuresAllowed = (pluginArchitecture == "x86") ? "x86" : "x64"
	String applicationArchitecureSuffix = pluginArchitecture;

	def innoSetupDir = new File("${buildDir}/innosetup")

	delete innoSetupDir
	innoSetupDir.mkdir();

	copy {
		from("${rootProject.projectDir}/build/install")
		into("${buildDir}/install")
	}

	copy {
		from("${rootProject.projectDir}/gradle/innosetup/setup-icon.ico")
		into("${buildDir}/install/syncany")
		rename("setup-icon.ico", "syncany.ico")
	}

	copy {
		from("${buildDir}/libs")
		include("*.jar")
		into("${buildDir}/install/syncany/lib")
	}

	copy {
		from("${rootProject.projectDir}/gradle/innosetup/setup-left.bmp")
		from("${rootProject.projectDir}/gradle/innosetup/setup-top.bmp")
		from("${rootProject.projectDir}/gradle/innosetup/setup-info-before.rtf")
		from("${rootProject.projectDir}/gradle/innosetup/setup-info-after.rtf")
		from("${rootProject.projectDir}/gradle/innosetup/setup-icon.ico")
		from("${rootProject.projectDir}/gradle/innosetup/modpath.iss")
		from("${rootProject.projectDir}/gradle/innosetup/code.iss")
		into(innoSetupDir)
	}

	copy {
		from("gradle/innosetup/launcher.vbs")
		into("${buildDir}/install/syncany/bin")
	}

	copy {
		from("gradle/innosetup/setup-gui.iss.skel")
		rename("setup-gui.iss.skel", "setup-gui.iss")
		expand([
			applicationVersion: "${applicationVersion}",
			applicationVersionFull: "${applicationVersionFull}",
			applicationArchitecuresAllowed: "${applicationArchitecuresAllowed}",
			applicationArchitecureSuffix: "${applicationArchitecureSuffix}"
		])
		into(innoSetupDir)
	}

	exec {
		workingDir projectDir
		commandLine "iscc ${innoSetupDir}/setup-gui.iss".split()
	}

	if (!project.ext.has('pluginExeDontCopyToUpload')) {
		copy {
			from files("${buildDir}/innosetup")
			include "*.exe"
			into file("${buildDir}/upload")
		}
	}
}

// OSX /////////////////////////////////////////////////////////////////////////

buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath 'com.github.cr0:gradle-macappbundle-plugin:3.1.0'
	}
}

apply plugin: 'com.github.cr0.macappbundle'

macAppBundle {
	appName = "Syncany"
	appCategory = "public.app-category.utilities"
	icon = "gradle/icon/syncany.icns"
	agent = true

	version = applicationVersionFull
	shortVersion = applicationVersion

	mainClassName = "org.syncany.cli.GuiCommand"

	bundleJRE = false
	bundleExecutable = "Syncany"
	bundleIdentifier = "org.syncany.osx"
	bundleCopyright = "(C) Copyright 2011-2015 Philipp Heckel"

	bundleExtras.put("NSHighResolutionCapable", "true")

	javaProperties.put("file.encoding", "utf-8")
	javaXProperties.add("mx2048M")
	javaXProperties.add("startOnFirstThread")

	javaClassPath.add("/Users/\$CURRENT_USER/.config/syncany/plugins/lib/*")

	archiveName = "syncany-${applicationVersionFull}-${pluginArchitecture}.app"
	archiveOutputDir = "upload"
}

// GUI Tasks ///////////////////////////////////////////////////////////////////

task(runGui, dependsOn: 'classes', type: JavaExec) {
	main = "org.syncany.cli.GuiCommand"
	// SWT need -XStartOnFirstThread to run on OSX
	jvmArgs = getOs().startsWith("mac") ? ['-XstartOnFirstThread'] : []
	classpath = sourceSets.main.runtimeClasspath
}

task(runGuiAppIndicator, dependsOn: 'classes', type: JavaExec) {
	main = "org.syncany.cli.GuiCommand"
	args = ["--tray", "appindicator"]
	// SWT need -XStartOnFirstThread to run on OSX
	jvmArgs = getOs().startsWith("mac") ? ['-XstartOnFirstThread'] : []
	classpath = sourceSets.main.runtimeClasspath
}
